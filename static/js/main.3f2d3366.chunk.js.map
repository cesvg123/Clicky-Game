{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/CardItem/CardItem.js","components/CardList/CardList.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","isGuessed","score","highScore","Footer","CardItem","onClick","imageClick","movie","id","title","name","alt","src","image","CardList","movies","map","index","key","App","state","clickedMovie","randomGenerator","a","b","Math","random","currentMovie","indexOf","setState","sort","alert","concat","max","length","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"86CAmBgBA,G,YAhBH,SAAAC,GAAK,OACjB,4BAAQC,UAAU,UACd,yBAAKA,UAAU,cAAf,eACA,6BAAMD,EAAME,WAAa,uBAAGD,UAAU,WAAb,iBACzB,yBAAKA,UAAU,iBACb,6BACE,yCADF,IAC0BD,EAAMG,OACzB,IAHT,IAII,IACF,6BACE,8CADF,IAC+BH,EAAMI,UAAW,SCNxCC,G,MAJF,SAAAL,GAAK,OAClB,4BAAQC,UAAU,UAAlB,iBCOeK,G,YARA,SAAAN,GAAK,OAClB,yBAAKO,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMS,MAAMC,KAAKT,UAAU,YAC9D,yBAAKA,UAAU,iBACb,yBAAKU,MAAOX,EAAMS,MAAMG,KAAMC,IAAKb,EAAMS,MAAMG,KAAME,IAAKd,EAAMS,MAAMM,MAAOd,UAAU,sBCQ9Ee,EAVC,SAAAhB,GAAK,OAClB,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACZD,EAAMiB,OAAOC,KAAI,SAACT,EAAOU,GAAR,OAChB,kBAAC,EAAD,CAAUC,IAAKX,EAAMC,GAAIF,WAAYR,EAAMQ,WAAYC,MAAOA,UCoEvDY,E,2MApEfC,MAAQ,CACRL,SACAM,aAAc,GACdpB,MAAO,EACPC,UAAW,EACXF,WAAW,G,EAITsB,gBAAkB,SAACC,EAAGC,GAAJ,OAAWC,KAAKC,SAAW,IAAO,EAAI,G,EAExDpB,WAAa,SAAAE,GACX,IAAMmB,EAAenB,EAIrB,GAFE,EAAKY,MAAMC,aAAaO,QAAQD,IAAiB,EAGjD,EAAKE,SAAS,CACZd,OAAQ,EAAKK,MAAML,OAAOe,KAAK,EAAKR,iBACpCD,aAAc,GACdpB,MAAO,EACPC,UAAW,EACXF,WAAW,IAEV+B,MAAM,wBAEJ,CACL,IAAI9B,EAAQ,EAAKmB,MAAMnB,MACnBc,EAAS,EAAKK,MAAML,OAExB,EAAKc,SACH,CACEd,OAAQ,EAAKK,MAAML,OAAOe,KAAK,EAAKR,iBACpCD,aAAc,EAAKD,MAAMC,aAAaW,OAAOL,GAC7C1B,MAAOA,EAAQ,EACfC,UAAWuB,KAAKQ,IAAI,EAAKb,MAAMlB,UAAWD,GAC1CD,WAAW,IAEb,WACM,EAAKoB,MAAMnB,QAAUc,EAAOmB,SAC9BH,MAAM,YACN,EAAKF,SAAS,CACZd,OAAQ,EAAKK,MAAML,OAAOe,KAAK,EAAKR,iBACpCD,aAAc,GACdpB,MAAO,EACPC,UAAW,U,wEAQb,IAAD,EACyCiC,KAAKf,MAA7CL,EADD,EACCA,OAAQd,EADT,EACSA,MAAOC,EADhB,EACgBA,UAAWF,EAD3B,EAC2BA,UAElC,OACE,yBAAKD,UAAU,eACb,kBAAC,EAAD,CAAQE,MAAOA,EAAOC,UAAWA,EAAWF,UAAWA,IACvD,yBAAKD,UAAU,WACb,kBAAC,EAAD,CAAUgB,OAAQA,EAAQT,WAAY6B,KAAK7B,cAE7C,kBAAC,EAAD,W,GA/DS8B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3f2d3366.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nvar Header = props => (\n\t<header className='header'>\n\t    <div className='brand-logo'>Clicky Game</div>\n\t    <div>{props.isGuessed && <p className='guessed'>You Guessed!</p>}</div>\n\t    <div className='score-details'>\n\t      <div>\n\t        <strong>Score</strong> {props.score}\n\t      </div>{' '}\n\t      |{' '}\n\t      <div>\n\t        <strong>High Score</strong> {props.highScore}{' '}\n\t      </div>\n\t    </div>\n\t  </header>\n\t);\n\t\n\texport default Header;\n","import React from 'react';\nimport './Footer.css';\n\nvar Footer = props => (\n<footer className='footer'>Clicky Game</footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport './CardItem.css';\n\nvar CardItem = props => (\n  <div onClick={() => props.imageClick(props.movie.id)} className=\"col-md-3\">\n    <div className='img-container'>\n      <img title={props.movie.name} alt={props.movie.name} src={props.movie.image} className='img-thumbnail'/>\n    </div>\n  </div>\n);\n\nexport default CardItem;\n","import React from 'react';\nimport \"./CardList.css\";\nimport CardItem from \"../CardItem\";\n\n\tvar CardList = props => (\n\t  <div className='container'>\n\t    <div className='row'>\n\t      {props.movies.map((movie, index) => (\n\t        <CardItem key={movie.id} imageClick={props.imageClick} movie={movie} />\n\t      ))}\n\t    </div>\n\t  </div>\n\t);\n\t\nexport default CardList;\n","import React, {Component} from \"react\";\nimport movies from \"./movies.json\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport CardList from \"./components/CardList\";\n\t\nclass App extends Component {\n\tstate = {\n\tmovies,\n\tclickedMovie: [],\n\tscore: 0,\n\thighScore: 0,\n\tisGuessed: false\n};\n\t\n\n\t  randomGenerator = (a, b) => (Math.random() > 0.5 ? -1 : 1);\n\n\t  imageClick = id => {\n\t    const currentMovie = id;\n\t    const MovieAlreadyClicked =\n\t      this.state.clickedMovie.indexOf(currentMovie) > -1;\n\t\n\t    if (MovieAlreadyClicked) {\n\t      this.setState({\n\t        movies: this.state.movies.sort(this.randomGenerator),\n\t        clickedMovie: [],\n\t        score: 0,\n\t        highScore: 0,\n\t        isGuessed: false\n\t      });\n          alert('You lose. Again?');\n          \n\t    } else {\n\t      let score = this.state.score;\n\t      let movies = this.state.movies;\n\n\t      this.setState(\n\t        {\n\t          movies: this.state.movies.sort(this.randomGenerator),\n\t          clickedMovie: this.state.clickedMovie.concat(currentMovie),\n\t          score: score + 1,\n\t          highScore: Math.max(this.state.highScore, score),\n\t          isGuessed: true\n\t        },\n\t        () => {\n\t          if (this.state.score === movies.length) {\n\t            alert('You Win!');\n\t            this.setState({\n\t              movies: this.state.movies.sort(this.randomGenerator),\n\t              clickedMovie: [],\n\t              score: 0,\n\t              highScore: 0\n\t            });\n\t          }\n\t        }\n\t      );\n\t    }\n\t  };\n\t\n\t  render() {\n\t    const { movies, score, highScore, isGuessed } = this.state;\n\t\n\t    return (\n\t      <div className='application'>\n\t        <Header score={score} highScore={highScore} isGuessed={isGuessed} />\n\t        <div className='wrapper'>\n\t          <CardList movies={movies} imageClick={this.imageClick} />\n\t        </div>\n\t        <Footer />\n\t      </div>\n\t    );\n\t  }\n\t}\n\t\n\texport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}